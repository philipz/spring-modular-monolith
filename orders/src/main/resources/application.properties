spring.application.name=orders-service
spring.threads.virtual.enabled=true

# Disable legacy REST API by default; enable via ORDERS_REST_ENABLED=true if needed
orders.rest.enabled=${ORDERS_REST_ENABLED:false}

#### Logging ####
logging.pattern.correlation=[${spring.application.name:},%X{traceId:-},%X{spanId:-}]
logging.include-application-name=false
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} %X{traceId:-} %X{spanId:-} - %msg%n

# Root logging level
logging.level.root=INFO

# Application-specific logging
logging.level.com.sivalabs.bookstore.orders=INFO
logging.level.com.sivalabs.bookstore.orders.web=DEBUG
logging.level.com.sivalabs.bookstore.orders.cache=DEBUG

# Framework logging levels
logging.level.org.springframework.web=INFO
logging.level.org.springframework.security=INFO
logging.level.org.springframework.boot.actuate=INFO
logging.level.org.springframework.cloud.sleuth=INFO
logging.level.io.micrometer=INFO

# Database logging
logging.level.org.springframework.jdbc=WARN
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type=WARN
logging.level.org.liquibase=INFO

# Cache logging
logging.level.com.hazelcast=INFO
logging.level.com.sivalabs.bookstore.orders.cache=DEBUG

# Circuit breaker and resilience logging
logging.level.io.github.resilience4j=INFO

# RabbitMQ and messaging logging
logging.level.org.springframework.amqp=INFO
logging.level.org.springframework.rabbit=INFO

# File logging configuration (optional - can be enabled via environment variables)
#.file.name=${LOGGING_FILE_NAME:orders-service.log}
logging.logback.rollingpolicy.file-name-pattern=${LOGGING_FILE_NAME:orders-service}.%d{yyyy-MM-dd}.%i.log
logging.logback.rollingpolicy.max-file-size=${LOGGING_MAX_FILE_SIZE:10MB}
logging.logback.rollingpolicy.max-history=${LOGGING_MAX_HISTORY:30}
logging.logback.rollingpolicy.total-size-cap=${LOGGING_TOTAL_SIZE_CAP:1GB}

#### Server ####
server.port=${SERVER_PORT:8091}
server.forward-headers-strategy=framework
spring.mvc.trailing-slash-match=true

#### Database ####
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/ordersdb}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:postgres}
spring.datasource.hikari.maximum-pool-size=${SPRING_DATASOURCE_POOL_SIZE:10}
spring.jpa.open-in-view=false
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=none

#### Liquibase ####
spring.liquibase.enabled=true
spring.liquibase.change-log=classpath:db/db.changelog-master.xml
spring.liquibase.contexts=
spring.liquibase.drop-first=false

#### RabbitMQ ####
spring.rabbitmq.host=${SPRING_RABBITMQ_HOST:localhost}
spring.rabbitmq.port=${SPRING_RABBITMQ_PORT:5673}
spring.rabbitmq.username=${SPRING_RABBITMQ_USERNAME:guest}
spring.rabbitmq.password=${SPRING_RABBITMQ_PASSWORD:guest}
app.amqp.new-orders.bind=${APP_AMQP_NEW_ORDERS_BIND:true}

#product.api.base-url=${PRODUCT_API_BASE_URL:http://localhost:8080}
product.api.connect-timeout=${PRODUCT_API_CONNECT_TIMEOUT:1s}
product.api.read-timeout=${PRODUCT_API_READ_TIMEOUT:2s}

resilience4j.circuitbreaker.instances.catalogApi.register-health-indicator=true
resilience4j.circuitbreaker.instances.catalogApi.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.instances.catalogApi.sliding-window-size=5
resilience4j.circuitbreaker.instances.catalogApi.minimum-number-of-calls=3
resilience4j.circuitbreaker.instances.catalogApi.wait-duration-in-open-state=5s
resilience4j.circuitbreaker.instances.catalogApi.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.catalogApi.ignore-exceptions=com.sivalabs.bookstore.orders.InvalidOrderException
resilience4j.retry.instances.catalogApi.max-attempts=${PRODUCT_API_RETRY_MAX_ATTEMPTS:3}
resilience4j.retry.instances.catalogApi.wait-duration=${PRODUCT_API_RETRY_WAIT:200ms}
resilience4j.retry.instances.catalogApi.retry-exceptions=org.springframework.web.client.HttpServerErrorException,java.io.IOException
resilience4j.timelimiter.instances.catalogApi.timeout-duration=${PRODUCT_API_TIMEOUT:2s}

#### Modulith Events ####
spring.modulith.events.jdbc.schema=${SPRING_MODULITH_EVENTS_SCHEMA:events}
spring.modulith.events.jdbc.enabled=true
spring.modulith.events.jdbc.schema-initialization.enabled=true
spring.modulith.events.republish-outstanding-events-on-restart=true
spring.modulith.events.externalization.enabled=true
spring.modulith.events.externalization.outbound-adapter=amqp
spring.modulith.events.externalization.stderr-logging-enabled=false

#### Cache ####
# Core cache configuration
bookstore.cache.enabled=${BOOKSTORE_CACHE_ENABLED:true}
bookstore.cache.max-size=${BOOKSTORE_CACHE_MAX_SIZE:1000}
bookstore.cache.time-to-live-seconds=${BOOKSTORE_CACHE_TTL:3600}
bookstore.cache.max-idle-seconds=${BOOKSTORE_CACHE_MAX_IDLE:0}
bookstore.cache.backup-count=${BOOKSTORE_CACHE_BACKUP_COUNT:1}

# Write-through cache behavior
bookstore.cache.write-through=${BOOKSTORE_CACHE_WRITE_THROUGH:true}
bookstore.cache.write-batch-size=${BOOKSTORE_CACHE_WRITE_BATCH_SIZE:1}
bookstore.cache.write-delay-seconds=${BOOKSTORE_CACHE_WRITE_DELAY_SECONDS:0}
bookstore.cache.read-backup-data=${BOOKSTORE_CACHE_READ_BACKUP_DATA:true}

# Cache monitoring and metrics
bookstore.cache.metrics-enabled=${BOOKSTORE_CACHE_METRICS_ENABLED:true}

# Circuit breaker configuration for cache fault tolerance
bookstore.cache.circuit-breaker.failure-threshold=${BOOKSTORE_CACHE_CB_FAILURE_THRESHOLD:5}
bookstore.cache.circuit-breaker.recovery-timeout=${BOOKSTORE_CACHE_CB_RECOVERY_TIMEOUT:30000}
bookstore.cache.circuit-breaker-failure-threshold=${BOOKSTORE_CACHE_CB_FAILURE_THRESHOLD:5}
bookstore.cache.circuit-breaker-recovery-timeout-ms=${BOOKSTORE_CACHE_CB_RECOVERY_TIMEOUT:30000}

# Health check configuration for cache
bookstore.cache.health-check.enabled=${BOOKSTORE_CACHE_HEALTH_ENABLED:true}
bookstore.cache.health-check.test-basic-operations=${BOOKSTORE_CACHE_HEALTH_TEST_OPS:true}
bookstore.cache.health-check.basic-operations-read-only=${BOOKSTORE_CACHE_HEALTH_READ_ONLY:false}

#### Session ####
spring.session.store-type=hazelcast
spring.session.hazelcast.map-name=spring:session:sessions
spring.session.timeout=30m

#### Observability ####
# Actuator endpoints configuration
management.endpoints.web.exposure.include=health,info,metrics,prometheus,env,loggers,configprops,httptrace,scheduledtasks,caches,conditions,threaddump,heapdump
management.endpoints.web.base-path=/actuator
management.endpoints.web.cors.allowed-origins=*
management.endpoints.web.cors.allowed-methods=GET,POST

# Health endpoint configuration
management.endpoint.health.probes.enabled=true
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always
management.endpoint.health.group.readiness.include=readinessState,db,rabbit,diskSpace,ping
management.endpoint.health.group.liveness.include=livenessState,diskSpace,ping

# Info endpoint configuration
management.endpoint.info.enabled=true
management.info.git.mode=full
management.info.build.enabled=true
management.info.java.enabled=true
management.info.os.enabled=true

# Metrics configuration
management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true
management.metrics.enable.jdbc=false
management.metrics.enable.hikaricp=false
management.metrics.tags.common.application=${spring.application.name}
management.metrics.tags.common.version=@project.version@
management.metrics.tags.common.environment=${spring.profiles.active:dev}
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.percentiles.http.server.requests=0.50,0.90,0.95,0.99
management.metrics.distribution.slo.http.server.requests=50ms,100ms,200ms,300ms,500ms,1s

# Tracing configuration
management.tracing.enabled=true
management.tracing.sampling.probability=1.0
management.zipkin.tracing.endpoint=${ZIPKIN_ENDPOINT:http://localhost:9412/api/v2/spans}

# Logging metrics
management.metrics.enable.logback=true

#### Modulith ####
spring.modulith.observability.instrumentation.datasource.enabled=false

#### API Documentation ####
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=alpha
springdoc.swagger-ui.tagsSorter=alpha
springdoc.show-actuator=false

#### Application-specific Monitoring ####
# Custom application info
info.app.name=${spring.application.name}
info.app.description=Orders microservice extracted from the modular monolith
info.app.version=@project.version@
info.app.java.version=@java.version@

# JVM and GC monitoring
management.metrics.enable.jvm=true
management.metrics.enable.system=true
management.metrics.enable.process=true

# HTTP client monitoring for Product API calls
management.metrics.enable.http.client=true

# Backfill configuration
orders.backfill.enabled=${ORDERS_BACKFILL_ENABLED:false}
orders.backfill.lookback-days=${ORDERS_BACKFILL_LOOKBACK_DAYS:30}
orders.backfill.record-limit=${ORDERS_BACKFILL_RECORD_LIMIT:500}
orders.backfill.source.url=${ORDERS_BACKFILL_SOURCE_URL:}
orders.backfill.source.username=${ORDERS_BACKFILL_SOURCE_USERNAME:}
orders.backfill.source.password=${ORDERS_BACKFILL_SOURCE_PASSWORD:}

# Event monitoring for order processing
management.metrics.enable.spring.modulith=true

# Custom business metrics
management.metrics.tags.service=orders
management.metrics.tags.team=bookstore
management.metrics.tags.domain=ecommerce

# Thread pool monitoring
management.metrics.enable.executor=true

# Connection pool monitoring
management.metrics.enable.jdbc.connections=false
management.metrics.enable.hikaricp.connections=false

# AMQP monitoring
management.metrics.enable.rabbitmq=true

#### gRPC Configuration ####
# gRPC server configuration
grpc.server.port=${GRPC_SERVER_PORT:9090}
grpc.server.reflection-service-enabled=${GRPC_SERVER_REFLECTION_ENABLED:true}
grpc.server.keep-alive-time=${GRPC_SERVER_KEEP_ALIVE_TIME:30s}
grpc.server.keep-alive-timeout=${GRPC_SERVER_KEEP_ALIVE_TIMEOUT:5s}
grpc.server.max-inbound-message-size=${GRPC_SERVER_MAX_INBOUND_MESSAGE_SIZE:4MB}

# gRPC client configuration
grpc.client.orders.address=${GRPC_CLIENT_ORDERS_ADDRESS:localhost:9090}
grpc.client.orders.deadline=${GRPC_CLIENT_ORDERS_DEADLINE:5s}
grpc.client.orders.keep-alive-time=${GRPC_CLIENT_ORDERS_KEEP_ALIVE_TIME:30s}
grpc.client.orders.keep-alive-timeout=${GRPC_CLIENT_ORDERS_KEEP_ALIVE_TIMEOUT:5s}
grpc.client.orders.keep-alive-without-calls=${GRPC_CLIENT_ORDERS_KEEP_ALIVE_WITHOUT_CALLS:true}
grpc.client.orders.max-inbound-message-size=${GRPC_CLIENT_ORDERS_MAX_INBOUND_MESSAGE_SIZE:4MB}

# Catalog service gRPC client configuration (for product validation)
grpc.client.catalog.address=${GRPC_CLIENT_CATALOG_ADDRESS:localhost:9090}
grpc.client.catalog.keep-alive-time=${GRPC_CLIENT_CATALOG_KEEP_ALIVE_TIME:30s}
grpc.client.catalog.keep-alive-timeout=${GRPC_CLIENT_CATALOG_KEEP_ALIVE_TIMEOUT:5s}
grpc.client.catalog.max-inbound-message-size=${GRPC_CLIENT_CATALOG_MAX_INBOUND_MESSAGE_SIZE:4MB}
