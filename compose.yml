services:
  postgres:
    image: 'postgres:17-alpine'
    environment:
      - 'POSTGRES_DB=postgres'
      - 'POSTGRES_PASSWORD=postgres'
      - 'POSTGRES_USER=postgres'
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - proxy

  rabbitmq:
    image: 'rabbitmq:4.1.3-management-alpine'
    environment:
      - 'RABBITMQ_DEFAULT_USER=guest'
      - 'RABBITMQ_DEFAULT_PASS=guest'
    ports:
      - '5672:5672'
      - '15672:15672'
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - proxy
  zipkin:
    image: 'openzipkin/zipkin:3.5.1'
    environment:
      - STORAGE_TYPE=mem
    ports:
      - '9411:9411'
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9411/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - proxy

  monolith:
    image: sivaprasadreddy/spring-modular-monolith
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      ORDERS_SERVICE_UI_URL: http://localhost:8080/orders
      ORDERS_SERVICE_BUY_URL: http://localhost:8080/buy
      # Hazelcast JVM optimization for Java modular environment
      JDK_JAVA_OPTIONS: "--add-modules java.se --add-exports java.base/jdk.internal.ref=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/sun.nio.ch=ALL-UNNAMED --add-opens java.management/sun.management=ALL-UNNAMED --add-opens jdk.management/com.sun.management.internal=ALL-UNNAMED"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - proxy

  orders-service:
    image: philipz/orders-service:latest
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      SERVER_PORT: 8091
      SPRING_MODULITH_EVENTS_SCHEMA: orders_events
      PRODUCT_API_BASE_URL: http://monolith:8080
    ports:
      - "8091:8091"
    networks:
      - proxy

  webproxy:
    depends_on:
      - monolith
      - orders-service
    build: webproxy
    environment:
      ORDERS_SERVICE_PERCENT: ${ORDERS_SERVICE_PERCENT:-100}
    networks:
      - proxy
    ports:
      - "8080:80"

  hazelcast-mgmt:
    depends_on:
      - monolith
    image: hazelcast/management-center:latest
    environment:
      - HZ_CLUSTERNAME=bookstore-cluster
      - HZ_NETWORK_PORT_AUTOINCREMENT=true
    networks:
      - proxy
    ports:
      - "38080:8080"

networks:
  proxy:
