services:
  postgres:
    image: 'postgres:17-alpine'
    environment:
      - 'POSTGRES_DB=postgres'
      - 'POSTGRES_PASSWORD=postgres'
      - 'POSTGRES_USER=postgres'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - proxy
  
  orders-postgres:
    image: 'postgres:17-alpine'
    environment:
      - 'POSTGRES_DB=postgres'
      - 'POSTGRES_PASSWORD=postgres'
      - 'POSTGRES_USER=postgres'
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - proxy

  rabbitmq:
    image: 'rabbitmq:4.1.3-management-alpine'
    environment:
      - 'RABBITMQ_DEFAULT_USER=guest'
      - 'RABBITMQ_DEFAULT_PASS=guest'
    ports:
      - '5672:5672'
      - '15672:15672'
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - proxy
  hyperdx:
    image: 'docker.hyperdx.io/hyperdx/hyperdx-all-in-one'
    ports:
      - '8081:8080'   # HyperDX UI (remapped to avoid conflict with webproxy)
      - '4317:4317'   # OpenTelemetry gRPC
      - '4318:4318'   # OpenTelemetry HTTP
    networks:
      - proxy

  monolith:
    image: sivaprasadreddy/spring-modular-monolith:0.0.1-SNAPSHOT
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_DATASOURCE_POOL_SIZE: 50
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      # OpenTelemetry configuration for HyperDX (gRPC protocol)
      OTLP_ENDPOINT: http://hyperdx:4317
      HYPERDX_API_KEY: 806699b2-a198-47cb-83ac-2cacacd57d58
      # REST API URL removed during gRPC migration (2025-10-04)
      # Previous: ORDERS_SERVICE_API_URL: http://orders-service:8091/api/orders
      BOOKSTORE_GRPC_CLIENT_TARGET: orders-service:9090
      # Hazelcast JVM optimization for Java modular environment
      JDK_JAVA_OPTIONS: "--add-modules java.se --add-exports java.base/jdk.internal.ref=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/sun.nio.ch=ALL-UNNAMED --add-opens java.management/sun.management=ALL-UNNAMED --add-opens jdk.management/com.sun.management.internal=ALL-UNNAMED"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - proxy

  orders-service:
    image: philipz/orders-service:0.0.1-SNAPSHOT
    depends_on:
      orders-postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://orders-postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_DATASOURCE_POOL_SIZE: 300
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      # OpenTelemetry configuration for HyperDX (gRPC protocol)
      OTLP_ENDPOINT: http://hyperdx:4317
      HYPERDX_API_KEY: 806699b2-a198-47cb-83ac-2cacacd57d58
      # REST port removed during gRPC migration (2025-10-04)
      # Previous: SERVER_PORT: 8091
      # Now using gRPC server on port 9090
      SPRING_MODULITH_EVENTS_SCHEMA: orders_events
      PRODUCT_API_BASE_URL: http://monolith:8080
    ports:
      - "9090:9090"  # gRPC server port
    networks:
      - proxy

  webproxy:
    depends_on:
      - monolith
      - orders-service
    build: webproxy
    networks:
      - proxy
    ports:
      - "8080:80"

  hazelcast-mgmt:
    depends_on:
      - monolith
    image: hazelcast/management-center:latest
    environment:
      - HZ_CLUSTERNAME=bookstore-cluster
      - HZ_NETWORK_PORT_AUTOINCREMENT=true
    networks:
      - proxy
    ports:
      - "38080:8080"

networks:
  proxy:
