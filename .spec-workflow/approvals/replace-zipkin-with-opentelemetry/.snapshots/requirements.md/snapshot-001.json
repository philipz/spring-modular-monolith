{
  "id": "snapshot_1759973176900_nxss7kq1v",
  "approvalId": "approval_1759973176887_0u59k97wk",
  "approvalTitle": "Requirements: Replace Zipkin with OpenTelemetry",
  "version": 1,
  "timestamp": "2025-10-09T01:26:16.900Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Requirements Document\n\n## Introduction\n\nThis specification defines the requirements for replacing the current Zipkin tracing infrastructure with OpenTelemetry (OTel) using gRPC protocol to send telemetry data to an OpenTelemetry Collector at port 4317. This migration aligns with industry best practices for unified observability and provides a vendor-neutral approach to distributed tracing, metrics, and logging.\n\n## Alignment with Product Vision\n\nThis feature supports the technical excellence and maintainability goals outlined in product.md by:\n- Adopting industry-standard observability practices with OpenTelemetry\n- Enabling unified telemetry data collection for traces, metrics, and logs\n- Providing flexibility to export data to multiple backends (Jaeger, Prometheus, Grafana Cloud, etc.)\n- Maintaining Spring Modulith's automatic module boundary tracing capabilities\n- Improving observability infrastructure for production deployments\n\n## Requirements\n\n### Requirement 1: Replace Zipkin Dependencies with OpenTelemetry\n\n**User Story:** As a developer, I want to use OpenTelemetry instead of Zipkin for tracing, so that we have a vendor-neutral, industry-standard observability solution.\n\n#### Acceptance Criteria\n\n1. WHEN the main pom.xml is updated THEN it SHALL remove Zipkin-related dependencies (zipkin-reporter-brave, micrometer-tracing-bridge-brave)\n2. WHEN the main pom.xml is updated THEN it SHALL add OpenTelemetry dependencies (opentelemetry-exporter-otlp) while keeping micrometer-tracing-bridge-otel\n3. WHEN the orders/pom.xml is updated THEN it SHALL also use OpenTelemetry dependencies instead of Zipkin\n4. IF the application starts THEN it SHALL not have any Zipkin dependency conflicts\n\n### Requirement 2: Configure OpenTelemetry Exporter with gRPC Protocol\n\n**User Story:** As a DevOps engineer, I want telemetry data sent via gRPC to the OpenTelemetry Collector, so that we have efficient and reliable data transmission.\n\n#### Acceptance Criteria\n\n1. WHEN application.properties is configured THEN it SHALL use management.otlp.tracing.endpoint pointing to http://otel-collector:4318/v1/traces for HTTP or grpc://otel-collector:4317 for gRPC\n2. WHEN environment variables are set THEN they SHALL configure OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317 for gRPC protocol\n3. WHEN environment variables are set THEN they SHALL configure OTEL_EXPORTER_OTLP_PROTOCOL=grpc\n4. IF the application starts THEN the OpenTelemetry exporter SHALL successfully connect to the collector on port 4317\n5. WHEN traces are generated THEN they SHALL be sent to the OpenTelemetry Collector using gRPC protocol\n\n### Requirement 3: Replace Zipkin Service with OpenTelemetry Collector in Docker Compose\n\n**User Story:** As a developer running the application locally, I want the OpenTelemetry Collector to replace Zipkin in docker-compose, so that I have the new observability infrastructure available.\n\n#### Acceptance Criteria\n\n1. WHEN compose.yml is updated THEN it SHALL remove the zipkin service definition\n2. WHEN compose.yml is updated THEN it SHALL add an otel-collector service using image otel/opentelemetry-collector-contrib\n3. WHEN the otel-collector service is configured THEN it SHALL expose port 4317 for gRPC and port 4318 for HTTP\n4. WHEN the otel-collector service starts THEN it SHALL mount a configuration file (otel-collector-config.yaml)\n5. WHEN monolith and orders-service environment variables are updated THEN they SHALL point to otel-collector instead of zipkin\n6. IF docker-compose up is run THEN all services SHALL start successfully and connect to the OpenTelemetry Collector\n\n### Requirement 4: Create OpenTelemetry Collector Configuration\n\n**User Story:** As a DevOps engineer, I want the OpenTelemetry Collector configured to receive and process telemetry data, so that traces can be exported to multiple backends.\n\n#### Acceptance Criteria\n\n1. WHEN otel-collector-config.yaml is created THEN it SHALL configure otlp receiver for both gRPC (4317) and HTTP (4318) protocols\n2. WHEN the collector configuration includes processors THEN it SHALL include batch processor for efficient data handling\n3. WHEN the collector configuration includes exporters THEN it SHALL include logging exporter for debugging\n4. WHEN the collector configuration includes exporters THEN it MAY include additional exporters (prometheus, jaeger, otlphttp) for production use\n5. IF the collector receives trace data THEN it SHALL process and export according to the pipeline configuration\n\n### Requirement 5: Update Documentation and Configuration Files\n\n**User Story:** As a developer, I want updated documentation and configuration examples, so that I understand how to work with the new OpenTelemetry setup.\n\n#### Acceptance Criteria\n\n1. WHEN CLAUDE.md is updated THEN it SHALL replace Zipkin references with OpenTelemetry Collector information\n2. WHEN CLAUDE.md is updated THEN it SHALL document the new collector URLs (http://localhost:4317 for gRPC, http://localhost:4318 for HTTP)\n3. WHEN README.md is updated THEN it SHALL reflect the new observability stack with OpenTelemetry\n4. IF a developer reads the documentation THEN they SHALL understand how to access and use the OpenTelemetry Collector\n\n### Requirement 6: Maintain Spring Modulith Observability Features\n\n**User Story:** As a developer, I want Spring Modulith's automatic module tracing to continue working with OpenTelemetry, so that we don't lose module boundary visibility.\n\n#### Acceptance Criteria\n\n1. WHEN the application uses Spring Modulith Starter Insight THEN it SHALL continue to generate Micrometer spans for module interactions\n2. WHEN module events are published THEN they SHALL be automatically traced with OpenTelemetry\n3. WHEN cross-module API calls occur THEN they SHALL appear in OpenTelemetry traces\n4. IF tests are run THEN module boundary tracing SHALL be verified in the telemetry data\n\n## Non-Functional Requirements\n\n### Code Architecture and Modularity\n- **Single Responsibility Principle**: Configuration changes should be isolated to observability-related files\n- **Modular Design**: OpenTelemetry integration should not impact existing module boundaries\n- **Dependency Management**: Use Maven dependency management to ensure consistent OTel versions across modules\n- **Clear Interfaces**: Maintain clear separation between application code and observability infrastructure\n\n### Performance\n- **Efficient Protocol**: gRPC protocol SHALL provide lower latency and better throughput compared to HTTP\n- **Batch Processing**: OpenTelemetry Collector SHALL use batch processor to reduce network overhead\n- **Sampling**: Maintain current sampling probability (1.0 for development, configurable for production)\n- **Resource Usage**: OpenTelemetry integration SHALL not significantly increase application memory or CPU usage\n\n### Security\n- **Network Security**: OpenTelemetry Collector SHALL be accessible only within the Docker network\n- **No Sensitive Data**: Trace data SHALL not include sensitive information (passwords, tokens, PII)\n- **Configuration Security**: Collector configuration SHALL follow security best practices\n\n### Reliability\n- **Health Checks**: OpenTelemetry Collector SHALL include health check endpoint\n- **Graceful Degradation**: Application SHALL continue functioning if collector is unavailable\n- **Data Retention**: Collector configuration SHALL define appropriate retention policies\n\n### Usability\n- **Developer Experience**: Local development setup SHALL be straightforward with docker-compose\n- **Debugging**: Logging exporter SHALL provide visibility into trace data for troubleshooting\n- **Compatibility**: Solution SHALL be compatible with multiple observability backends (Jaeger, Prometheus, Grafana)\n",
  "fileStats": {
    "size": 7746,
    "lines": 116,
    "lastModified": "2025-10-09T01:26:08.189Z"
  },
  "comments": []
}