{
  "id": "snapshot_1760838412225_0ck50awll",
  "approvalId": "approval_1760837739843_h9y1nukfu",
  "approvalTitle": "Next.js Frontend Integration - Tasks Document (40 Atomic Tasks)",
  "version": 2,
  "timestamp": "2025-10-19T01:46:52.224Z",
  "trigger": "approved",
  "status": "pending",
  "content": "# Implementation Plan: Next.js Frontend Integration\n\n## Task Overview\n\nThis implementation plan breaks down the integration of the Next.js frontend with the Spring Boot modular monolith backend into atomic, file-level tasks. The approach follows shell script-based build orchestration, CORS configuration for development, enhanced HTTP client with session support, OpenAPI type generation, and production-ready static resource handling.\n\n## Steering Document Compliance\n\n- **Backend Standards**: Spring Boot 3.5.5, Java 21, Spring Web MVC for configuration\n- **Frontend Standards**: Next.js 14 App Router, TypeScript strict mode, pnpm package manager\n- **Project Structure**: Backend config in `src/main/java/com/sivalabs/bookstore/config/`, frontend in `frontend-nuxt/`, build scripts at project root\n- **Build Strategy**: Shell script orchestration maintaining frontend/backend independence, no Maven frontend plugin\n\n## Atomic Task Requirements\n**Each task meets these criteria for optimal agent execution:**\n- **File Scope**: Touches 1-3 related files maximum\n- **Time Boxing**: Completable in 15-30 minutes\n- **Single Purpose**: One testable outcome per task\n- **Specific Files**: Must specify exact files to create/modify\n- **Agent-Friendly**: Clear input/output with minimal context switching\n\n## Tasks\n\n### Phase 1: Build Infrastructure (Shell Script Orchestration)\n\n- [ ] 1. Create main build orchestration script build.sh\n  - File: `build.sh` (new file at project root)\n  - Create shell script that orchestrates frontend build → asset copy → backend build\n  - Add Node.js and pnpm prerequisite checks with clear error messages\n  - Include `set -e` for fail-fast behavior\n  - Add build verification check for `.next` directory existence\n  - Purpose: Provide unified build command that maintains frontend/backend independence\n  - _Requirements: 2.1, 2.2, 2.3, 2.4_\n\n- [ ] 2. Add frontend-only build utility script\n  - File: `build-frontend-only.sh` (new file at project root)\n  - Create script that builds frontend and copies assets to backend resources\n  - Skips backend Maven build for faster frontend iteration\n  - Purpose: Enable rapid frontend development workflow\n  - _Requirements: 2.5_\n\n- [ ] 3. Add clean utility script\n  - File: `clean.sh` (new file at project root)\n  - Create script that removes all build artifacts (frontend .next, node_modules, Maven target)\n  - Clean up copied assets in `src/main/resources/static/`\n  - Purpose: Provide clean slate for fresh builds\n  - _Requirements: 2.4_\n\n- [ ] 4. Make build scripts executable\n  - Files: `build.sh`, `build-frontend-only.sh`, `clean.sh`\n  - Run `chmod +x` on all three scripts\n  - Add scripts to `.gitattributes` with `eol=lf` to prevent Windows line ending issues\n  - Purpose: Ensure scripts can be executed on Linux/macOS/Git Bash\n  - _Requirements: 2.1_\n\n### Phase 2: Backend Configuration (CORS, Session, Static Resources)\n\n- [ ] 5. Create CORS configuration for development\n  - File: `src/main/java/com/sivalabs/bookstore/config/CorsConfig.java` (new file)\n  - Implement `WebMvcConfigurer` with `@Profile(\"dev\")`\n  - Configure CORS to allow `http://localhost:3000` with credentials\n  - Allow GET, POST, PUT, DELETE, OPTIONS methods\n  - Set max age to 3600 seconds for preflight cache\n  - Purpose: Enable frontend dev server (port 3000) to call backend API (port 8080)\n  - _Leverage: Existing Spring Web MVC configuration infrastructure_\n  - _Requirements: 3.1, 3.2, 3.3, 3.5_\n\n- [ ] 6. Add session cookie configuration properties\n  - File: `src/main/resources/application.properties` (modify existing)\n  - Add session timeout: `server.servlet.session.timeout=30m`\n  - Configure session cookie name: `server.servlet.session.cookie.name=BOOKSTORE_SESSION`\n  - Set HttpOnly flag: `server.servlet.session.cookie.http-only=true`\n  - Configure secure flag with default: `server.servlet.session.cookie.secure=${USE_SECURE_COOKIES:false}`\n  - Set SameSite policy: `server.servlet.session.cookie.same-site=strict`\n  - Purpose: Secure session cookies for anonymous cart management\n  - _Leverage: Existing Hazelcast session configuration_\n  - _Requirements: 6.1, 6.2, 12.2_\n\n- [ ] 7. Create production session cookie configuration\n  - File: `src/main/resources/application-prod.properties` (new file or modify existing)\n  - Set secure cookies: `USE_SECURE_COOKIES=true`\n  - Configure production domain: `server.servlet.session.cookie.domain=${FRONTEND_DOMAIN}`\n  - Purpose: Enforce secure cookies in production environment\n  - _Leverage: Existing profile-based configuration pattern_\n  - _Requirements: 12.2_\n\n- [ ] 8. Create static resource handler configuration\n  - File: `src/main/java/com/sivalabs/bookstore/config/StaticResourceConfig.java` (new file)\n  - Implement `WebMvcConfigurer` to add resource handlers\n  - Configure `/_next/static/**` path with 365-day cache control (immutable assets)\n  - Configure `/favicon.ico`, `/images/**`, `/css/**` with 7-day cache\n  - Purpose: Serve Next.js frontend assets from Spring Boot with proper caching\n  - _Leverage: Spring Boot's ResourceHandlerRegistry and static resource serving_\n  - _Requirements: 10.1, 10.2, 10.3, 10.4_\n\n- [ ] 9. Add SPA routing fallback configuration\n  - File: `src/main/java/com/sivalabs/bookstore/config/StaticResourceConfig.java` (modify existing from task 8)\n  - Add `spaRoutingConfigurer()` bean with `@Order(Ordered.LOWEST_PRECEDENCE)`\n  - Configure view controller to forward all non-API routes to `/index.html`\n  - Use pattern `/{spring:[^\\\\.]*}` to match SPA routes\n  - Purpose: Enable client-side routing for Next.js application\n  - _Leverage: StaticResourceConfig.java from task 8_\n  - _Requirements: 10.5_\n\n### Phase 3: Frontend HTTP Client Enhancement\n\n- [ ] 10. Create TypeScript error types\n  - File: `frontend-nuxt/apps/web/lib/errors.ts` (new file)\n  - Define `ApiError` interface with status, message, details fields\n  - Create `HttpError` class extending Error with status code and details\n  - Purpose: Provide structured error handling for API responses\n  - _Requirements: 5.3, 11.2, 11.3, 11.4_\n\n- [ ] 11. Enhance HTTP client with base URL and credentials\n  - File: `frontend-nuxt/apps/web/lib/http.ts` (modify existing)\n  - Add `API_BASE_URL` constant from environment variable with `http://localhost:8080` default\n  - Update GET method to use base URL and include `credentials: 'include'`\n  - Add `Accept: application/json` header\n  - Keep existing `{ data: T }` return type for backward compatibility\n  - Purpose: Configure HTTP client for session-based API calls\n  - _Leverage: Existing HTTP client structure at http.ts:7-11_\n  - _Requirements: 5.1, 5.2, 6.2, 12.5_\n\n- [ ] 12. Add error handling to HTTP client GET method\n  - File: `frontend-nuxt/apps/web/lib/http.ts` (modify existing)\n  - Import `HttpError` from errors.ts\n  - Wrap error responses in HttpError with status code and parsed message\n  - Handle JSON parsing errors with fallback to statusText\n  - Add 10-second timeout using AbortSignal\n  - Purpose: Provide consistent error handling and timeout for GET requests\n  - _Leverage: errors.ts module from task 10_\n  - _Requirements: 5.3, 5.4, 11.2, 11.4, 11.6_\n\n- [ ] 13. Implement POST method with credentials and error handling\n  - File: `frontend-nuxt/apps/web/lib/http.ts` (modify existing)\n  - Add POST method with base URL, credentials, and Content-Type header\n  - Include error handling with HttpError wrapping\n  - Handle 204 No Content responses\n  - Add 10-second timeout using AbortSignal\n  - Return direct type `T` instead of `{ data: T }` for new code\n  - Purpose: Support cart and order creation API calls with session management\n  - _Leverage: Enhanced GET method error handling pattern from task 12_\n  - _Requirements: 5.2, 5.3, 11.2, 11.6_\n\n- [ ] 14. Add PUT and DELETE methods to HTTP client\n  - File: `frontend-nuxt/apps/web/lib/http.ts` (modify existing)\n  - Implement PUT method similar to POST with appropriate method and headers\n  - Implement DELETE method similar to GET with method override\n  - Include same error handling, credentials, and timeout configuration\n  - Purpose: Complete HTTP verb support for RESTful API calls\n  - _Leverage: Enhanced GET and POST methods from tasks 12-13_\n  - _Requirements: 5.2, 5.3, 11.6_\n\n### Phase 4: OpenAPI Type Generation\n\n- [ ] 15. Update package.json with type generation scripts\n  - File: `frontend-nuxt/package.json` (modify existing)\n  - Preserve existing `gen:types` script that uses docs/specs/api/openapi.yaml\n  - Add `gen:types:local` script pointing to `http://localhost:8080/api-docs`\n  - Add `gen:types:backend` alias for `gen:types:local` (clarity)\n  - Purpose: Enable type generation from both running backend and committed spec file\n  - _Leverage: Existing openapi-typescript devDependency at package.json:40_\n  - _Requirements: 4.1, 4.2, 4.4, 4.5_\n\n- [ ] 16. Create environment variable documentation\n  - File: `frontend-nuxt/.env.example` (new file)\n  - Document `NEXT_PUBLIC_API_URL` with default `http://localhost:8080`\n  - Document `OPENAPI_SOURCE` with options: HTTP URL or file path\n  - Add comments explaining when to use `gen:types:local` (live backend) vs `gen:types` (committed YAML)\n  - Include example: `# NEXT_PUBLIC_API_URL=http://localhost:8080`\n  - Purpose: Provide clear documentation for configuration options\n  - _Requirements: 4.1, 5.1, 8.5_\n\n- [ ] 17. Generate initial TypeScript types from backend\n  - Files: Executes script → generates `apps/web/lib/types/openapi.d.ts`\n  - Prerequisite check: Verify backend is running with `curl http://localhost:8080/api-docs` (if fails, skip with warning)\n  - Execute: `cd frontend-nuxt && pnpm gen:types:local`\n  - Verify output: Check `apps/web/lib/types/openapi.d.ts` exists and contains `paths` export\n  - Purpose: Bootstrap type-safe API client with backend DTOs\n  - _Leverage: gen:types:local script from task 15_\n  - _Requirements: 4.2, 4.3, 4.5_\n\n### Phase 5: API Query Hooks Integration\n\n- [ ] 18. Extract OpenAPI types for product endpoints\n  - File: `frontend-nuxt/apps/web/features/books/api/queries.ts` (create new file)\n  - Import generated types: `import type { paths } from '@/lib/types/openapi'`\n  - Extract `ProductsResponse` type from `paths['/api/products']['get']`\n  - Extract `ProductResponse` type from `paths['/api/products/{code}']['get']`\n  - Create query key factory: `qk.products(params)` and `qk.product(code)`\n  - Purpose: Establish type-safe foundation for product queries\n  - _Leverage: Generated OpenAPI types from task 17_\n  - _Requirements: 4.3, 4.5, 7.1, 7.4_\n\n- [ ] 19. Implement product query hooks\n  - File: `frontend-nuxt/apps/web/features/books/api/queries.ts` (modify from task 18)\n  - Implement `useProducts(page)` hook using `client.GET` with `ProductsResponse` type\n  - Implement `useProduct(code)` hook using `client.GET` with `ProductResponse` type\n  - Use query key factory from task 18\n  - Purpose: Provide type-safe product catalog queries\n  - _Leverage: Enhanced HTTP client from tasks 11-12, query key factory from task 18_\n  - _Requirements: 7.1, 7.4_\n\n- [ ] 20. Create cart types and query hook\n  - File: `frontend-nuxt/apps/web/features/cart/api/queries.ts` (create new file)\n  - Import generated cart types from OpenAPI paths: `CartDto`, `CartItemDto`\n  - Extract type from `paths['/api/cart']['get']`\n  - Create query key factory: `qk.cart()`\n  - Implement `useCart()` hook for fetching cart state with credentials\n  - Purpose: Provide type-safe cart state query with session persistence\n  - _Leverage: Enhanced HTTP client with credentials from task 11, generated OpenAPI types from task 17_\n  - _Requirements: 6.1, 6.2, 7.2, 7.4, 12.5_\n\n- [ ] 21. Implement cart mutation hooks (add and update)\n  - File: `frontend-nuxt/apps/web/features/cart/api/queries.ts` (modify from task 20)\n  - Implement `useAddToCart()` mutation using `client.POST` to `/api/cart/items`\n  - Implement `useUpdateCartItem()` mutation using `client.PUT` to `/api/cart/items/{code}`\n  - Invalidate `qk.cart()` query after successful mutations\n  - Include credentials in all API calls for session management\n  - Purpose: Provide type-safe cart addition and update operations\n  - _Leverage: Enhanced HTTP client POST/PUT methods from tasks 13-14, query key from task 20_\n  - _Requirements: 7.2, 7.4, 12.5_\n\n- [ ] 22. Implement cart remove mutation hook\n  - File: `frontend-nuxt/apps/web/features/cart/api/queries.ts` (modify from task 21)\n  - Implement `useRemoveFromCart()` mutation using `client.DELETE` to `/api/cart/items/{code}`\n  - Invalidate `qk.cart()` query after successful removal\n  - Include credentials for session management\n  - Purpose: Complete cart management mutation hooks\n  - _Leverage: Enhanced HTTP client DELETE method from task 14, query invalidation pattern from task 21_\n  - _Requirements: 7.2, 7.4, 12.5_\n\n- [ ] 23. Create order types and mutation hook\n  - File: `frontend-nuxt/apps/web/features/orders/api/queries.ts` (create new file)\n  - Import generated order types: `CreateOrderRequest`, `CreateOrderResponse`, `OrderDto`\n  - Extract types from OpenAPI paths: `/api/orders` POST and GET endpoints\n  - Create query key factory: `qk.orders()`, `qk.order(orderNumber)`\n  - Implement `useCreateOrder()` mutation with typed request/response\n  - Purpose: Provide type-safe order creation\n  - _Leverage: Enhanced HTTP client POST method from task 13, generated OpenAPI types from task 17_\n  - _Requirements: 7.3, 7.4_\n\n### Phase 6: MSW Mock Alignment\n\n- [ ] 24. Update product MSW handlers to match backend schema\n  - File: `frontend-nuxt/apps/web/mocks/handlers.ts` (modify existing)\n  - Import `ProductDto` and `PagedResult` types from generated OpenAPI\n  - Update product list handler to return `PagedResult<ProductDto>` structure\n  - Update product detail handler to return `ProductDto` structure\n  - Use realistic product data matching backend entities\n  - Purpose: Align product mocks with backend OpenAPI contract\n  - _Leverage: Generated OpenAPI types from task 17_\n  - _Requirements: 9.1, 9.2, 9.4_\n\n- [ ] 25. Update cart MSW handlers to match backend schema\n  - File: `frontend-nuxt/apps/web/mocks/handlers.ts` (modify existing from task 24)\n  - Import `CartDto` and `CartItemDto` types from generated OpenAPI\n  - Update cart GET handler to return `CartDto` structure\n  - Update cart POST/PUT/DELETE handlers to match backend request/response schemas\n  - Use realistic cart data with session simulation\n  - Purpose: Align cart mocks with backend OpenAPI contract and session behavior\n  - _Leverage: Generated OpenAPI types from task 17_\n  - _Requirements: 9.1, 9.2, 9.4_\n\n- [ ] 26. Update order MSW handlers to match backend schema\n  - File: `frontend-nuxt/apps/web/mocks/handlers.ts` (modify existing from task 25)\n  - Import `CreateOrderRequest`, `CreateOrderResponse`, `OrderDto` types from generated OpenAPI\n  - Update order creation handler to match `CreateOrderRequest`/`CreateOrderResponse` schemas\n  - Update order list/detail handlers to return `OrderDto` structures\n  - Use realistic order data matching backend entities\n  - Purpose: Complete MSW mock alignment with backend API contract\n  - _Leverage: Generated OpenAPI types from task 17_\n  - _Requirements: 9.1, 9.2, 9.3, 9.4_\n\n### Phase 7: Testing Infrastructure\n\n- [ ] 27. Create HTTP client unit tests\n  - File: `frontend-nuxt/apps/web/lib/http.test.ts` (new file)\n  - Test base URL configuration from `NEXT_PUBLIC_API_URL` environment variable\n  - Test credentials inclusion in all requests (GET, POST, PUT, DELETE)\n  - Test error handling for 4xx responses (client errors)\n  - Test error handling for 5xx responses (server errors)\n  - Test HttpError structure with status code and message\n  - Test 10-second timeout behavior\n  - Purpose: Ensure HTTP client reliability and error handling\n  - _Leverage: Existing Vitest configuration, MSW for mocking HTTP requests_\n  - _Requirements: 5.2, 5.3, 5.4, 11.2, 11.3, 11.6_\n\n- [ ] 28. Create integration test for type generation workflow\n  - File: `frontend-nuxt/apps/web/lib/types/__tests__/openapi.integration.test.ts` (new file)\n  - Test that generated types match expected backend DTO structures\n  - Verify `ProductDto`, `CartDto`, `OrderDto` types exist and have correct fields\n  - Test that `paths` object includes expected API endpoints: `/api/products`, `/api/cart`, `/api/orders`\n  - Verify type extraction works: `paths['/api/products']['get']['responses']['200']`\n  - Purpose: Ensure type generation produces valid, usable types\n  - _Leverage: Generated openapi.d.ts file from task 17_\n  - _Requirements: 4.2, 4.3, 4.5_\n\n- [ ] 29. Create E2E test for product browsing and cart addition\n  - File: `frontend-nuxt/apps/web/e2e/shopping-flow.spec.ts` (new file)\n  - Test scenario: Browse products → Add product to cart\n  - Verify product list displays correctly\n  - Click \"Add to Cart\" button and verify cart count updates\n  - Check network requests include credentials\n  - Purpose: Validate product browsing and cart addition flow\n  - _Leverage: Existing Playwright configuration_\n  - _Requirements: 6.1, 7.1, 7.2_\n\n- [ ] 30. Add E2E test for cart updates and session persistence\n  - File: `frontend-nuxt/apps/web/e2e/shopping-flow.spec.ts` (modify from task 29)\n  - Test cart quantity update functionality\n  - Test cart item removal functionality\n  - Verify cart state persists after page refresh (session management)\n  - Verify cart total amount calculates correctly\n  - Purpose: Validate cart management and session persistence\n  - _Leverage: Shopping flow test from task 29_\n  - _Requirements: 6.1, 6.2, 6.5, 7.2_\n\n- [ ] 31. Add E2E test for order placement and confirmation\n  - File: `frontend-nuxt/apps/web/e2e/shopping-flow.spec.ts` (modify from task 30)\n  - Test complete order checkout flow\n  - Fill order form with customer details and delivery address\n  - Submit order and verify API call completes\n  - Verify order confirmation page displays order number\n  - Check cart is cleared after successful order\n  - Purpose: Validate complete shopping flow from browsing to order\n  - _Leverage: Cart tests from task 30_\n  - _Requirements: 7.3_\n\n### Phase 8: Documentation and Deployment\n\n- [ ] 32. Create README for build scripts\n  - File: `BUILD.md` (new file at project root)\n  - Document `./build.sh` usage and prerequisites (Node.js 18+, pnpm 9+)\n  - Explain `./build-frontend-only.sh` for frontend-only iteration\n  - Document `./clean.sh` for cleaning build artifacts\n  - Include CI/CD integration examples (GitHub Actions, GitLab CI)\n  - Add troubleshooting section for common build issues\n  - Purpose: Provide clear build instructions for developers and CI/CD\n  - _Requirements: 2.1, 8.1, 10.1_\n\n- [ ] 33. Update main project README with frontend integration section\n  - File: `README.md` (modify existing at project root)\n  - Add section \"Frontend Integration\" explaining Next.js + Spring Boot architecture\n  - Document development workflow: separate dev servers vs production JAR\n  - Link to BUILD.md for detailed build instructions\n  - Document environment variables: `NEXT_PUBLIC_API_URL`, `OPENAPI_SOURCE`\n  - Add Quick Start guide for frontend development\n  - Purpose: Help developers understand frontend-backend integration approach\n  - _Requirements: 8.1, 8.2, 8.3_\n\n- [ ] 34. Add deployment checklist to documentation\n  - File: `DEPLOYMENT.md` (new file at project root)\n  - Document production build process: `./build.sh` → JAR deployment\n  - Checklist: Verify frontend assets in JAR, test `/` and `/api/*` routes, check cache headers\n  - Document environment-specific configuration (CORS domains, secure cookies)\n  - Include health check endpoints: `/actuator/health`\n  - Add rollback procedures and troubleshooting guide\n  - Purpose: Provide deployment verification steps for production releases\n  - _Leverage: Existing Actuator health endpoints_\n  - _Requirements: 10.1, 10.2, 10.5_\n\n### Phase 9: Automated Validation Tests\n\n- [ ] 35. Create CORS validation integration test\n  - File: `src/test/java/com/sivalabs/bookstore/config/CorsConfigTests.java` (new file)\n  - Use `@SpringBootTest` with `dev` profile\n  - Test OPTIONS preflight request to `/api/products` with `Origin: http://localhost:3000`\n  - Verify response includes `Access-Control-Allow-Origin: http://localhost:3000`\n  - Verify `Access-Control-Allow-Credentials: true` header present\n  - Verify allowed methods include GET, POST, PUT, DELETE\n  - Purpose: Automated verification of CORS configuration\n  - _Leverage: CorsConfig.java from task 5, existing test infrastructure_\n  - _Requirements: 3.1, 3.2, 3.3, 3.5_\n\n- [ ] 36. Create session persistence integration test\n  - File: `src/test/java/com/sivalabs/bookstore/web/SessionPersistenceTests.java` (new file)\n  - Use `@SpringBootTest(webEnvironment = RANDOM_PORT)` with Testcontainers\n  - Test sequence: Add item to cart → Extract session cookie → Make new request with same cookie\n  - Verify cart state persists with session cookie\n  - Verify `BOOKSTORE_SESSION` cookie has HttpOnly and SameSite=Strict flags\n  - Verify session timeout is 30 minutes\n  - Purpose: Automated validation of session-based cart management\n  - _Leverage: Session cookie configuration from tasks 6-7, existing Testcontainers setup_\n  - _Requirements: 6.1, 6.2, 6.3, 12.1, 12.2_\n\n- [ ] 37. Create build verification test script\n  - File: `verify-build.sh` (new file at project root)\n  - Execute `./build.sh` and check exit code is 0\n  - Run `jar tf target/*.jar | grep \"BOOT-INF/classes/static/_next/\"` and verify output not empty\n  - Start JAR in background: `java -jar target/*.jar &`\n  - Wait for startup (poll `/actuator/health` endpoint)\n  - Test frontend loads: `curl -I http://localhost:8080/ | grep \"200 OK\"`\n  - Test API accessible: `curl http://localhost:8080/api/products | jq .`\n  - Kill JAR process\n  - Purpose: Automated verification of production build\n  - _Leverage: build.sh from task 1, StaticResourceConfig from task 8_\n  - _Requirements: 10.1, 10.2, 10.5_\n\n- [ ] 38. Add bundle size validation to frontend build\n  - File: `frontend-nuxt/package.json` (modify existing)\n  - Add `check:bundle-size` script using `size-limit` or similar tool\n  - Configure size budget: 500KB (gzipped) for initial bundle\n  - Add post-build hook to automatically run bundle size check\n  - Purpose: Automated enforcement of bundle size requirements\n  - _Requirements: NFR Performance (206), 10.1_\n\n- [ ] 39. Create error boundary component for backend unavailability\n  - File: `frontend-nuxt/apps/web/components/ErrorBoundary.tsx` (new file)\n  - Create React error boundary component with fallback UI\n  - Display user-friendly message: \"Unable to load application. Please refresh.\"\n  - Include retry button that calls `window.location.reload()`\n  - Log error details to console for debugging\n  - Purpose: Graceful handling of backend unavailability during startup\n  - _Leverage: React error boundary pattern_\n  - _Requirements: 11.7_\n\n- [ ] 40. Add error boundary to root layout\n  - File: `frontend-nuxt/apps/web/app/layout.tsx` (modify existing)\n  - Wrap application root with ErrorBoundary component from task 39\n  - Ensure error boundary catches initialization errors\n  - Purpose: Enable error boundary for all pages\n  - _Leverage: ErrorBoundary component from task 39_\n  - _Requirements: 11.7_\n",
  "fileStats": {
    "size": 23224,
    "lines": 425,
    "lastModified": "2025-10-19T01:35:07.417Z"
  },
  "comments": []
}