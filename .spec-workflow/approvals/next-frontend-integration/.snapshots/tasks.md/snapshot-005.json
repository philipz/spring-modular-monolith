{
  "id": "snapshot_1760869650773_16jtrw9vp",
  "approvalId": "approval_1760869464141_nr9tznifw",
  "approvalTitle": "Review REVISED Tasks - Shell Script + Docker + nginx",
  "version": 5,
  "timestamp": "2025-10-19T10:27:30.773Z",
  "trigger": "revision_requested",
  "status": "pending",
  "content": "# Implementation Plan: Next.js Frontend Integration\n\n## Task Overview\n\nThis implementation plan breaks down the integration of the Next.js 14 frontend with the Spring Boot modular monolith backend into atomic, file-level tasks. The approach uses **shell scripts for independent frontend builds**, **Docker for containerization**, **nginx as a reverse proxy**, and **Docker Compose for orchestration**. The frontend and backend are completely decoupled and can operate independently.\n\n## Steering Document Compliance\n\n- **Backend Standards**: Spring Boot 3.5.5, Java 21, Spring Web MVC REST APIs\n- **Frontend Standards**: Next.js 14 App Router, TypeScript strict mode, pnpm 9.0+, React 18\n- **Build Integration**: Shell script-based builds, Docker multi-stage builds, nginx reverse proxy\n- **Project Structure**: Backend in `src/main/java/com/sivalabs/bookstore/`, frontend in `frontend-next/` (independent)\n- **Session Management**: Hazelcast distributed sessions for stateful cart operations\n- **Deployment**: Docker Compose with frontend (nginx), backend (Spring Boot), PostgreSQL, RabbitMQ, HyperDX\n\n## Atomic Task Requirements\n\n**Each task meets these criteria for optimal agent execution:**\n- **File Scope**: Touches 1-3 related files maximum\n- **Time Boxing**: Completable in 15-30 minutes\n- **Single Purpose**: One testable outcome per task\n- **Specific Files**: Must specify exact files to create/modify\n- **Agent-Friendly**: Clear input/output with minimal context switching\n\n## Tasks\n\n### Phase 1: Frontend Build Script and Docker Setup\n\n- [ ] 1. Create frontend build script\n  - File: `frontend-next/build.sh` (new file)\n  - Make executable with `chmod +x build.sh`\n  - Add shebang: `#!/bin/bash`\n  - Check Node.js version (>= 18)\n  - Execute `pnpm install --frozen-lockfile`\n  - Execute `pnpm build` for Next.js static export\n  - Verify `out/` directory created\n  - Purpose: Independent frontend build without Maven dependency\n  - _Requirements: 2.1, 2.2, 2.3_\n  - _Leverages: Shell scripting, Next.js build system_\n\n- [ ] 2. Create nginx configuration for frontend\n  - File: `frontend-next/nginx.conf` (new file)\n  - Configure server listening on port 80\n  - Serve static files from `/usr/share/nginx/html`\n  - Set up reverse proxy to backend: `proxy_pass http://backend:8080/api`\n  - Add proxy headers: `Host`, `X-Real-IP`, `X-Forwarded-For`, `X-Forwarded-Proto`\n  - Configure `try_files` for Next.js client-side routing\n  - Set cache headers for static assets\n  - Purpose: nginx as frontend server and reverse proxy\n  - _Requirements: 3.1, 10.2_\n  - _Leverages: nginx reverse proxy capabilities_\n\n- [ ] 3. Create frontend Dockerfile\n  - File: `frontend-next/Dockerfile` (new file)\n  - Stage 1: Build - Use `node:18-alpine` as base\n  - Install pnpm globally\n  - Copy `package.json`, `pnpm-lock.yaml`\n  - Run `pnpm install --frozen-lockfile`\n  - Copy source code and build with `pnpm build`\n  - Stage 2: Runtime - Use `nginx:alpine`\n  - Copy nginx.conf to `/etc/nginx/conf.d/default.conf`\n  - Copy built static files from build stage to `/usr/share/nginx/html`\n  - Expose port 80\n  - Purpose: Multi-stage Docker build for optimized frontend image\n  - _Requirements: 10.1, 10.3_\n  - _Leverages: Docker multi-stage builds, nginx_\n\n- [ ] 4. Update docker-compose.yml for frontend service\n  - File: `docker-compose.yml` (modify existing)\n  - Add `frontend` service\n  - Build from `./frontend-next` context\n  - Map port `3000:80` for external access\n  - Add dependency on `backend` service\n  - Configure network to allow backend communication\n  - Set environment variables if needed\n  - Purpose: Integrate frontend into Docker Compose orchestration\n  - _Requirements: 10.2, 10.3_\n  - _Leverages: Existing docker-compose.yml with backend services_\n\n- [ ] 5. Create frontend development script\n  - File: `frontend-next/dev.sh` (new file)\n  - Make executable with `chmod +x dev.sh`\n  - Check if backend is running (health check on port 8080)\n  - Execute `pnpm install` if node_modules missing\n  - Execute `pnpm dev` to start Next.js dev server on port 3000\n  - Purpose: Convenient development workflow script\n  - _Requirements: 8.1, 8.2_\n  - _Leverages: Next.js dev server, shell scripting_\n\n### Phase 2: Next.js Project Setup\n\n- [ ] 6. Initialize Next.js 14 project with App Router\n  - Files: `frontend-next/` directory (new), multiple Next.js config files\n  - Execute: `mkdir -p frontend-next && cd frontend-next && pnpm create next-app@latest . --typescript --tailwind --app --src-dir --import-alias \"@/*\"`\n  - Verify: package.json, tsconfig.json, next.config.js created\n  - Purpose: Bootstrap Next.js 14 project with TypeScript and App Router\n  - _Requirements: Tech.md (Next.js 14, TypeScript)_\n  - _Leverages: Next.js create-next-app CLI_\n\n- [ ] 7. Configure Next.js for static export\n  - File: `frontend-next/next.config.js` (modify existing)\n  - Add `output: 'export'` to Next.js config\n  - Add `images: { unoptimized: true }` to disable image optimization\n  - Add `trailingSlash: true` for proper routing\n  - Set `basePath` to empty string for production\n  - Purpose: Configure Next.js to generate static files for nginx\n  - _Requirements: 2.3, 10.1_\n  - _Leverages: Next.js static export feature_\n\n- [ ] 8. Add OpenAPI TypeScript generator dependency\n  - File: `frontend-next/package.json` (modify existing)\n  - Add `openapi-typescript` version `^7.0.0` to devDependencies\n  - Add `gen:types` script: `openapi-typescript http://localhost:8080/api-docs -o src/lib/types/openapi.d.ts`\n  - Purpose: Enable TypeScript type generation from backend OpenAPI spec\n  - _Requirements: 4.1, 4.2_\n  - _Leverages: Backend /api-docs endpoint from OpenApiConfig_\n\n- [ ] 9. Add TanStack Query dependencies\n  - File: `frontend-next/package.json` (modify existing)\n  - Add `@tanstack/react-query` version `^5.0.0` to dependencies\n  - Add `@tanstack/react-query-devtools` version `^5.0.0` to devDependencies\n  - Purpose: Install React Query for server state management\n  - _Requirements: Design Component 5 (TanStack Query Hooks)_\n  - _Leverages: React Query for API state management_\n\n- [ ] 10. Add MSW (Mock Service Worker) dependencies\n  - File: `frontend-next/package.json` (modify existing)\n  - Add `msw` version `^2.0.0` to devDependencies\n  - Add `init:msw` script: `msw init public/ --save`\n  - Purpose: Install MSW for API mocking during development\n  - _Requirements: 9.1, 9.2_\n  - _Leverages: MSW for development without backend dependency_\n\n### Phase 3: Backend CORS Configuration\n\n- [ ] 11. Create CorsConfig for development\n  - File: `src/main/java/com/sivalabs/bookstore/config/CorsConfig.java` (new file)\n  - Implement `WebMvcConfigurer` with `@Profile(\"dev\")` annotation\n  - Configure `addCorsMappings` to allow `http://localhost:3000` origin\n  - Set `allowCredentials(true)` for session cookie support\n  - Allow methods: GET, POST, PUT, DELETE, OPTIONS\n  - Set `maxAge(3600)` for preflight cache\n  - Purpose: Enable Next.js dev server to call backend APIs\n  - _Requirements: 3.1, 3.2, 3.3, 3.5_\n  - _Leverages: Spring Web MVC CORS support_\n\n### Phase 4: Backend Session Configuration\n\n- [ ] 12. Configure session cookie properties in application.properties\n  - File: `src/main/resources/application.properties` (modify existing)\n  - Add `server.servlet.session.timeout=30m`\n  - Add `server.servlet.session.cookie.name=BOOKSTORE_SESSION`\n  - Add `server.servlet.session.cookie.http-only=true`\n  - Add `server.servlet.session.cookie.secure=${USE_SECURE_COOKIES:false}`\n  - Add `server.servlet.session.cookie.same-site=strict`\n  - Purpose: Configure secure session cookies for cart management\n  - _Requirements: 6.1, 6.2, 12.2_\n  - _Leverages: Existing Hazelcast session management_\n\n- [ ] 13. Create production session configuration\n  - File: `src/main/resources/application-prod.properties` (new file or modify existing)\n  - Set `USE_SECURE_COOKIES=true`\n  - Configure `server.servlet.session.cookie.domain=${FRONTEND_DOMAIN:}`\n  - Purpose: Enforce secure cookies in production\n  - _Requirements: 12.2_\n  - _Leverages: Spring profiles for environment-specific config_\n\n### Phase 5: Frontend HTTP Client Infrastructure\n\n- [ ] 14. Create TypeScript error types\n  - File: `frontend-next/src/lib/api/errors.ts` (new file)\n  - Define `HttpError` class extending Error\n  - Add `status: number`, `message: string`, `details?: unknown` properties\n  - Export `HttpError` class\n  - Purpose: Structured error handling for API responses\n  - _Requirements: 5.3, 11.2, 11.4_\n  - _Leverages: TypeScript class-based error handling_\n\n- [ ] 15. Create HTTP client with timeout and session support\n  - File: `frontend-next/src/lib/api/client.ts` (new file)\n  - Define `API_BASE_URL` from `process.env.NEXT_PUBLIC_API_URL` with fallback to `/api` for production\n  - Implement `apiClient.get<T>(path, init)` with 10-second timeout\n  - Include `credentials: 'include'` for all requests\n  - Add `Accept: application/json` header\n  - Import and throw `HttpError` on non-OK responses\n  - Purpose: Type-safe HTTP client with session cookie support\n  - _Requirements: 5.1, 5.2, 5.3, 6.2, 11.6_\n  - _Leverages: Fetch API with AbortController for timeout_\n\n- [ ] 16. Implement POST, PUT, DELETE methods in HTTP client\n  - File: `frontend-next/src/lib/api/client.ts` (modify existing)\n  - Implement `apiClient.post<T>(path, body, init)` with timeout\n  - Implement `apiClient.put<T>(path, body, init)` with timeout\n  - Implement `apiClient.delete<T>(path, init)` with timeout\n  - Add `Content-Type: application/json` for POST/PUT\n  - Handle 204 No Content responses\n  - Add session expiration detection (401/403 → prompt refresh)\n  - Purpose: Complete HTTP verb support with error handling\n  - _Requirements: 5.2, 5.3, 11.6, 12.4_\n  - _Leverages: GET method from task 15_\n\n### Phase 6: OpenAPI Type Generation\n\n- [ ] 17. Create lib/types directory structure\n  - Files: `frontend-next/src/lib/types/` directory (new)\n  - Create empty `.gitkeep` file to preserve directory\n  - Purpose: Prepare directory for generated OpenAPI types\n  - _Requirements: 4.2_\n  - _Leverages: Next.js src/ directory structure_\n\n- [ ] 18. Generate initial TypeScript types from backend\n  - Files: Executes script → generates `src/lib/types/openapi.d.ts`\n  - Prerequisite: Verify backend running with `curl http://localhost:8080/api-docs`\n  - Execute: `cd frontend-next && pnpm gen:types`\n  - Verify: Check `openapi.d.ts` contains `paths` and `components` exports\n  - Purpose: Bootstrap type-safe API client with backend DTOs\n  - _Requirements: 4.2, 4.3, 4.5_\n  - _Leverages: Backend OpenAPI endpoint, openapi-typescript tool_\n\n### Phase 7: TanStack Query Setup\n\n- [ ] 19. Create Query Provider component\n  - File: `frontend-next/src/app/providers.tsx` (new file)\n  - Mark as `'use client'`\n  - Create `QueryClient` with retry and staleTime configuration\n  - Export `Providers` component wrapping `QueryClientProvider`\n  - Include `ReactQueryDevtools` component\n  - Configure retry logic: no retry for 4xx (except 408), up to 3 retries for 5xx\n  - Configure `retryDelay` with exponential backoff\n  - Purpose: Configure TanStack Query for Next.js App Router\n  - _Requirements: Design Component 6, Component 7 (retry logic)_\n  - _Leverages: TanStack Query client-side hooks_\n\n- [ ] 20. Integrate Providers in root layout\n  - File: `frontend-next/src/app/layout.tsx` (modify existing)\n  - Import `Providers` from `./providers`\n  - Wrap `{children}` with `<Providers>` component\n  - Purpose: Enable React Query hooks throughout application\n  - _Requirements: Design Component 6_\n  - _Leverages: Next.js App Router layout system_\n\n### Phase 8: Product Feature Hooks\n\n- [ ] 21. Create useProducts hook with OpenAPI types\n  - File: `frontend-next/src/lib/hooks/use-products.ts` (new file)\n  - Import types from `@/lib/types/openapi`\n  - Extract `ProductsResponse` type from paths\n  - Implement `useProducts(page, pageSize)` using `useQuery`\n  - Call `apiClient.get<PagedResult<ProductDto>>` with pagination params\n  - Set `queryKey: ['products', page, pageSize]`\n  - Set `staleTime: 1000 * 60 * 5` (5 minutes)\n  - Purpose: Type-safe product listing with pagination\n  - _Requirements: 7.1, 7.4_\n  - _Leverages: Generated OpenAPI types, TanStack Query, HTTP client_\n\n- [ ] 22. Create useProduct hook for single product\n  - File: `frontend-next/src/lib/hooks/use-products.ts` (modify existing)\n  - Extract `ProductResponse` type from OpenAPI paths\n  - Implement `useProduct(code)` using `useQuery`\n  - Call `apiClient.get<ProductDto>(\\`/api/products/${code}\\`)`\n  - Set `enabled: !!code` to prevent auto-fetch without code\n  - Purpose: Type-safe single product retrieval\n  - _Requirements: 7.1, 7.4_\n  - _Leverages: useProducts hook pattern from task 21_\n\n### Phase 9: Cart Feature Hooks\n\n- [ ] 23. Create useCart hook with session persistence\n  - File: `frontend-next/src/lib/hooks/use-cart.ts` (new file)\n  - Import `CartResponse` type from OpenAPI paths\n  - Implement `useCart()` using `useQuery`\n  - Call `apiClient.get<CartDto>('/api/cart')`\n  - Set `queryKey: ['cart']`, `staleTime: 1000 * 30` (30 seconds)\n  - Purpose: Type-safe cart state retrieval with session\n  - _Requirements: 6.1, 6.2, 7.2, 7.4_\n  - _Leverages: HTTP client with credentials, TanStack Query_\n\n- [ ] 24. Create cart mutation hooks (add, update, remove)\n  - File: `frontend-next/src/lib/hooks/use-cart.ts` (modify existing)\n  - Implement `addItem` mutation using `useMutation` with POST\n  - Implement `updateQuantity` mutation using `useMutation` with PUT\n  - Implement `removeItem` mutation using `useMutation` with DELETE\n  - All mutations invalidate `['cart']` query on success\n  - Export object: `{ cart, addItem, updateQuantity, removeItem }`\n  - Purpose: Type-safe cart operations with optimistic updates\n  - _Requirements: 7.2, 7.4_\n  - _Leverages: useCart query from task 23_\n\n### Phase 10: Orders Feature Hooks\n\n- [ ] 25. Create useOrders hook with pagination\n  - File: `frontend-next/src/lib/hooks/use-orders.ts` (new file)\n  - Import `OrdersResponse` type from OpenAPI paths\n  - Define `PagedResult<T>` type helper\n  - Implement `useOrders(page, pageSize)` using `useQuery`\n  - Call `apiClient.get<PagedResult<OrderDto>>` with pagination\n  - Set `staleTime: 1000 * 60 * 2` (2 minutes)\n  - Purpose: Type-safe order history with pagination\n  - _Requirements: 7.3, 7.4_\n  - _Leverages: Pagination pattern from useProducts_\n\n- [ ] 26. Create useOrder and useCreateOrder hooks\n  - File: `frontend-next/src/lib/hooks/use-orders.ts` (modify existing)\n  - Implement `useOrder(orderNumber)` for single order retrieval\n  - Implement `useCreateOrder()` mutation using `useMutation` with POST\n  - Invalidate `['orders']` and `['cart']` queries on successful order creation\n  - Purpose: Type-safe order creation and retrieval\n  - _Requirements: 7.3, 7.4_\n  - _Leverages: useOrders query from task 25_\n\n### Phase 11: Cross-Tab Synchronization\n\n- [ ] 27. Create Broadcast Channel sync hook\n  - File: `frontend-next/src/lib/hooks/use-broadcast-sync.ts` (new file)\n  - Mark as `'use client'`\n  - Implement `useBroadcastSync()` hook using `useEffect`\n  - Create `BroadcastChannel('bookstore-sync')`\n  - Listen for `CART_UPDATED` messages and invalidate cart query\n  - Subscribe to TanStack Query mutation cache for cart mutations\n  - Broadcast `CART_UPDATED` on successful cart mutations\n  - Include fallback polling (30s interval) for browsers without Broadcast Channel API\n  - Purpose: Synchronize cart state across multiple browser tabs\n  - _Requirements: 6.5, Design Component 6 (Cross-Tab Sync)_\n  - _Leverages: Broadcast Channel API, TanStack Query mutation cache_\n\n- [ ] 28. Create BroadcastSyncProvider component\n  - File: `frontend-next/src/lib/providers/broadcast-sync-provider.tsx` (new file)\n  - Mark as `'use client'`\n  - Call `useBroadcastSync()` hook\n  - Return `null` (side-effect only component)\n  - Purpose: Enable cross-tab sync throughout application\n  - _Requirements: 6.5_\n  - _Leverages: useBroadcastSync hook from task 27_\n\n- [ ] 29. Integrate BroadcastSyncProvider in layout\n  - File: `frontend-next/src/app/layout.tsx` (modify existing)\n  - Import `BroadcastSyncProvider`\n  - Add `<BroadcastSyncProvider />` inside `<Providers>` wrapper\n  - Purpose: Activate cross-tab synchronization\n  - _Requirements: 6.5_\n  - _Leverages: BroadcastSyncProvider from task 28_\n\n### Phase 12: Error Handling Components\n\n- [ ] 30. Create ErrorBoundary component\n  - File: `frontend-next/src/components/error-boundary.tsx` (new file)\n  - Mark as `'use client'`\n  - Implement React class component with `getDerivedStateFromError` and `componentDidCatch`\n  - Provide `fallback` prop for custom error UI\n  - Include retry functionality via `handleRetry` method\n  - Log errors to console (future: send to HyperDX)\n  - Purpose: Graceful error handling for backend unavailability\n  - _Requirements: 11.7, Design Component 7_\n  - _Leverages: React Error Boundary pattern_\n\n- [ ] 31. Create ErrorMessage display component\n  - File: `frontend-next/src/components/error-message.tsx` (new file)\n  - Mark as `'use client'`\n  - Accept `error: unknown` and `onRetry?: () => void` props\n  - Implement `getMessage()` to format error messages (4xx vs 5xx vs network)\n  - Implement `isRetryable()` to show/hide retry button\n  - Display user-friendly error messages\n  - Purpose: Consistent error display with retry functionality\n  - _Requirements: 11.1, 11.2, 11.3, 11.5, Design Component 7_\n  - _Leverages: HttpError from task 14_\n\n### Phase 13: MSW Mock Infrastructure\n\n- [ ] 32. Initialize MSW in public directory\n  - Files: `frontend-next/public/mockServiceWorker.js` (generated)\n  - Execute: `cd frontend-next && pnpm init:msw`\n  - Verify: mockServiceWorker.js created in public/ directory\n  - Purpose: Initialize MSW service worker for API mocking\n  - _Requirements: 9.1, 9.2_\n  - _Leverages: MSW CLI init command_\n\n- [ ] 33. Create MSW handlers with OpenAPI types\n  - File: `frontend-next/src/mocks/handlers.ts` (new file)\n  - Import types from `@/lib/types/openapi`\n  - Create `http.get('/api/products')` handler with paginated mock data\n  - Create `http.get('/api/products/:code')` handler\n  - Create `http.get('/api/cart')` handler\n  - Create `http.post('/api/cart/items')` handler\n  - Create `http.put('/api/cart/items/:code')` handler\n  - Create `http.delete('/api/cart/items/:code')` handler\n  - Create `http.get('/api/orders')` handler with pagination\n  - Create `http.post('/api/orders')` handler\n  - Add `delay(300)` to simulate network latency\n  - Include error scenario handlers (e.g., 500 errors)\n  - Purpose: OpenAPI-aligned mocks for development without backend\n  - _Requirements: 9.1, 9.2, 9.3, 9.4, Design Component 8_\n  - _Leverages: Generated OpenAPI types, MSW http handlers_\n\n- [ ] 34. Create MSW browser setup\n  - File: `frontend-next/src/mocks/browser.ts` (new file)\n  - Import `setupWorker` from `msw/browser`\n  - Import `handlers` from `./handlers`\n  - Export `worker = setupWorker(...handlers)`\n  - Purpose: Configure MSW for browser environment\n  - _Requirements: 9.1_\n  - _Leverages: MSW browser worker, handlers from task 33_\n\n- [ ] 35. Create MSW server setup for tests\n  - File: `frontend-next/src/mocks/server.ts` (new file)\n  - Import `setupServer` from `msw/node`\n  - Import `handlers` from `./handlers`\n  - Export `server = setupServer(...handlers)`\n  - Purpose: Configure MSW for Node.js test environment\n  - _Requirements: 9.3_\n  - _Leverages: MSW Node server, handlers from task 33_\n\n- [ ] 36. Create MSWProvider component\n  - File: `frontend-next/src/lib/providers/msw-provider.tsx` (new file)\n  - Mark as `'use client'`\n  - Check `process.env.NODE_ENV === 'development'` and `NEXT_PUBLIC_USE_MOCKS === 'true'`\n  - Dynamically import and start MSW worker if conditions met\n  - Display \"Loading mocks...\" while initializing\n  - Purpose: Conditionally enable MSW during development\n  - _Requirements: 8.4, 8.5, 9.5, Design Component 8_\n  - _Leverages: MSW worker from task 34_\n\n- [ ] 37. Integrate MSWProvider in layout\n  - File: `frontend-next/src/app/layout.tsx` (modify existing)\n  - Import `MSWProvider`\n  - Wrap entire `<Providers>` tree with `<MSWProvider>`\n  - Purpose: Enable MSW mocks when configured\n  - _Requirements: 8.4, 9.5_\n  - _Leverages: MSWProvider from task 36_\n\n### Phase 14: Environment Configuration\n\n- [ ] 38. Create .env.example documentation\n  - File: `frontend-next/.env.example` (new file)\n  - Document `NEXT_PUBLIC_API_URL` with default `/api` (for nginx reverse proxy in production)\n  - Document `NEXT_PUBLIC_USE_MOCKS` with values `true` or `false`\n  - Include comments explaining dev vs prod usage\n  - Add note: In production, nginx proxies `/api/*` to backend\n  - Purpose: Document environment variables for developers\n  - _Requirements: 4.1, 5.1, 8.5, Design Component 4_\n  - _Leverages: Next.js environment variable conventions_\n\n- [ ] 39. Create .env.local for local development\n  - File: `frontend-next/.env.local` (new file, git-ignored)\n  - Set `NEXT_PUBLIC_USE_MOCKS=false`\n  - Set `NEXT_PUBLIC_API_URL=http://localhost:8080`\n  - Purpose: Default configuration for local development\n  - _Requirements: 8.5_\n  - _Leverages: .env.example from task 38_\n\n### Phase 15: Testing Infrastructure\n\n- [ ] 40. Create HTTP client unit tests\n  - File: `frontend-next/src/lib/api/__tests__/client.test.ts` (new file)\n  - Test base URL configuration from environment variable\n  - Test credentials inclusion in all requests\n  - Test 10-second timeout with AbortController\n  - Test error handling for 4xx and 5xx responses\n  - Test session expiration detection (401/403)\n  - Test HttpError structure\n  - Purpose: Ensure HTTP client reliability\n  - _Requirements: 5.2, 5.3, 5.4, 11.6, Design Component 7_\n  - _Leverages: Vitest, HTTP client from tasks 15-16_\n\n- [ ] 41. Create TanStack Query hooks unit tests\n  - File: `frontend-next/src/lib/hooks/__tests__/use-products.test.ts` (new file)\n  - Test `useProducts` hook with MSW\n  - Test `useProduct` hook with MSW\n  - Test loading and error states\n  - Test query key generation\n  - Verify type safety with OpenAPI types\n  - Purpose: Validate product hooks behavior\n  - _Requirements: 7.1, 7.4_\n  - _Leverages: Vitest, Testing Library, MSW server, hooks from tasks 21-22_\n\n- [ ] 42. Create cart hooks unit tests\n  - File: `frontend-next/src/lib/hooks/__tests__/use-cart.test.ts` (new file)\n  - Test `useCart` query hook\n  - Test `addItem`, `updateQuantity`, `removeItem` mutations\n  - Test query invalidation on successful mutations\n  - Test session persistence with credentials\n  - Purpose: Validate cart hooks behavior\n  - _Requirements: 6.1, 6.2, 7.2, 7.4_\n  - _Leverages: Vitest, MSW server, hooks from tasks 23-24_\n\n- [ ] 43. Create E2E test for product browsing\n  - File: `frontend-next/e2e/product-catalog.spec.ts` (new file)\n  - Test scenario: Navigate to products page → Verify product list displays\n  - Check pagination functionality\n  - Verify product details page\n  - Check network requests include credentials\n  - Purpose: Validate product browsing flow\n  - _Requirements: 7.1_\n  - _Leverages: Playwright, useProducts hooks_\n\n- [ ] 44. Create E2E test for shopping cart flow\n  - File: `frontend-next/e2e/shopping-cart.spec.ts` (new file)\n  - Test: Browse products → Add to cart → View cart\n  - Test quantity update functionality\n  - Test item removal functionality\n  - Verify cart total calculation\n  - Test page refresh persistence (session cookie)\n  - Purpose: Validate cart management and session persistence\n  - _Requirements: 6.1, 6.2, 6.5, 7.2_\n  - _Leverages: Playwright, useCart hooks, session management_\n\n- [ ] 45. Create E2E test for order placement\n  - File: `frontend-next/e2e/checkout-flow.spec.ts` (new file)\n  - Test: Add items to cart → Checkout → Fill form → Submit order\n  - Verify order confirmation page with order number\n  - Check cart cleared after successful order\n  - Verify order appears in order history\n  - Purpose: Validate complete checkout flow\n  - _Requirements: 7.3_\n  - _Leverages: Playwright, useCart and useCreateOrder hooks_\n\n### Phase 16: Development Workflow Documentation\n\n- [ ] 46. Create DEVELOPMENT.md guide\n  - File: `frontend-next/DEVELOPMENT.md` (new file)\n  - Document prerequisites: Node.js 18+, pnpm 9+, Docker\n  - Document frontend dev server setup: `./dev.sh` or `pnpm dev`\n  - Document type generation workflow: `pnpm gen:types`\n  - Document MSW mock usage with environment variables\n  - Document Docker build: `docker build -t bookstore-frontend .`\n  - Document Docker Compose usage: `docker compose up frontend`\n  - Include HMR and Fast Refresh explanation\n  - Add troubleshooting section\n  - Purpose: Guide developers through frontend setup\n  - _Requirements: 8.1, 8.2, 8.3, Design Development Workflow_\n  - _Leverages: Next.js dev server, MSW configuration, Docker_\n\n- [ ] 47. Update project README with frontend section\n  - File: `README.md` (modify existing at project root)\n  - Add \"Frontend Integration\" section\n  - Document Next.js 14 App Router architecture\n  - Explain Docker-based deployment with nginx\n  - Document development workflow (dev server vs Docker Compose)\n  - Document nginx reverse proxy configuration\n  - Link to frontend-next/DEVELOPMENT.md\n  - Purpose: Help developers understand frontend-backend integration\n  - _Requirements: 8.1_\n  - _Leverages: Existing README structure, DEVELOPMENT.md from task 46_\n\n### Phase 17: Docker Build and Deployment Validation\n\n- [ ] 48. Create Docker build verification script\n  - File: `verify-docker-build.sh` (new file at project root)\n  - Make executable with `chmod +x verify-docker-build.sh`\n  - Build backend: `./mvnw clean package` and verify exit code 0\n  - Build backend Docker image: `docker build -t bookstore-backend .`\n  - Build frontend Docker image: `cd frontend-next && docker build -t bookstore-frontend .`\n  - Verify images created: `docker images | grep bookstore`\n  - Start containers: `docker compose up -d`\n  - Wait for health checks to pass\n  - Test frontend accessible: `curl -I http://localhost:3000`\n  - Test backend API via reverse proxy: `curl http://localhost:3000/api/products`\n  - Test direct backend access: `curl http://localhost:8080/api/products`\n  - Clean up: `docker compose down`\n  - Purpose: Automated verification of Docker build and deployment\n  - _Requirements: 10.1, 10.2, 10.3_\n  - _Leverages: Docker, Docker Compose, shell scripting_\n\n- [ ] 49. Add bundle size validation\n  - File: `frontend-next/package.json` (modify existing)\n  - Add `@next/bundle-analyzer` to devDependencies\n  - Add `analyze` script: `ANALYZE=true next build`\n  - Configure Next.js to fail build if bundle > 500KB gzipped\n  - Purpose: Enforce bundle size requirements\n  - _Requirements: NFR Performance (206), 10.1_\n  - _Leverages: Next.js built-in bundle analyzer_\n\n### Phase 18: Docker Compose Integration Testing\n\n- [ ] 50. Create Docker Compose integration test\n  - File: `docker-compose-integration-test.sh` (new file at project root)\n  - Make executable with `chmod +x docker-compose-integration-test.sh`\n  - Start all services: `docker compose up -d`\n  - Wait for all health checks to pass (frontend, backend, postgres, rabbitmq)\n  - Test: Frontend serves static assets at `http://localhost:3000`\n  - Test: nginx reverse proxy forwards `/api/*` to backend\n  - Test: Backend API accessible at `http://localhost:3000/api/products`\n  - Test: Session cookies work across nginx proxy\n  - Test: CORS headers not present (same-origin via nginx)\n  - Test: End-to-end flow - browse products, add to cart, create order\n  - Verify: Check Docker logs for errors\n  - Clean up: `docker compose down -v`\n  - Purpose: Validate complete Docker Compose integration\n  - _Requirements: All requirements_\n  - _Leverages: All components from previous tasks, Docker Compose_\n\n## Completion Criteria\n\nAll 50 tasks must be marked as `[x]` completed. Each phase builds upon previous phases. Verify:\n\n- Frontend builds independently with shell script\n- Docker multi-stage build creates optimized frontend image\n- nginx serves frontend and acts as reverse proxy to backend\n- Docker Compose orchestrates all services (frontend, backend, postgres, rabbitmq, hyperdx)\n- CORS not needed in production (same-origin via nginx)\n- OpenAPI types generated and used in TanStack Query hooks\n- Session management works across nginx reverse proxy\n- Cross-tab synchronization works via Broadcast Channel API\n- MSW mocks enable frontend development without backend\n- Error handling works with retry logic and error boundaries\n- All E2E tests pass\n- Docker build verification passes\n- Docker Compose integration test passes\n- Documentation complete\n\n## Task Execution Notes\n\n- Tasks are designed to be executed sequentially within each phase\n- Some tasks can run in parallel across different phases (e.g., frontend setup while backend config)\n- Always verify prerequisites before starting a task\n- Mark tasks as `[-]` when in progress, `[x]` when completed\n- If a task fails, document blocker and seek assistance\n\n## Architecture Notes\n\n### Development Workflow\n- Frontend runs on `localhost:3000` (Next.js dev server)\n- Backend runs on `localhost:8080` (Spring Boot)\n- CORS enabled for development\n- Direct API calls from frontend to backend\n\n### Production Deployment (Docker Compose)\n- Frontend: nginx container on port 3000 (or 80)\n- Backend: Spring Boot container on port 8080\n- nginx reverse proxies `/api/*` to `http://backend:8080/api`\n- Same-origin requests (no CORS needed)\n- PostgreSQL, RabbitMQ, HyperDX as separate services\n\n### Build Independence\n- Frontend: Built with `build.sh` → Docker multi-stage build\n- Backend: Built with Maven → Docker build\n- No build-time dependencies between frontend and backend\n- Only runtime dependency: frontend calls backend APIs\n",
  "fileStats": {
    "size": 29723,
    "lines": 638,
    "lastModified": "2025-10-19T10:23:59.699Z"
  },
  "comments": []
}